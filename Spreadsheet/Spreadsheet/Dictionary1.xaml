<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CustomControlsLibrary"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    x:Class="CustomControlsLibrary.Dictionary1">



    <!--Style for ButtonStyle ends here-->
    <!--Control Template for button start here-->

    <Style TargetType="Button" x:Key="buttonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Width="{TemplateBinding Width}" Height="35">
                        <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" CornerRadius="3" x:Name="myButton">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" >
                                <TextBlock.Foreground>
                                    White
                                </TextBlock.Foreground>
                                <TextBlock.FontSize>13</TextBlock.FontSize>

                            </ContentPresenter>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <EventSetter Event="Button.PreviewMouseLeftButtonDown" Handler="ButtonDown" />
        <EventSetter Event="Button.PreviewMouseLeftButtonUp" Handler="ButtonUp" />
        <EventSetter Event="Button.MouseEnter" Handler="ButtonEnter" />
        <EventSetter Event="Button.MouseLeave" Handler="ButtonLeave"/>
        <Setter Property="FontFamily" Value="Helvetica Neue" />
    </Style>

    <Style BasedOn="{StaticResource buttonStyle}" TargetType="Button" x:Key="buttonPrimary">
        <Setter Property="Background" Value="#428bca" />
    </Style>

    <Style BasedOn="{StaticResource buttonStyle}" TargetType="Button" x:Key="buttonInfo">
        <Setter Property="Background" Value="#5bc0de" />
    </Style>

    <Style BasedOn="{StaticResource buttonStyle}" TargetType="Button" x:Key="buttonSuccess">
        <Setter Property="Background" Value="#5cb85c" />
    </Style>

    <Style BasedOn="{StaticResource buttonStyle}" TargetType="Button" x:Key="buttonWarning">
        <Setter Property="Background" Value="#f0ad4e" />
    </Style>

    <Style BasedOn="{StaticResource buttonStyle}" TargetType="Button">
        <Setter Property="Background" Value="Black" />
    </Style>

    <Style BasedOn="{StaticResource buttonStyle}" TargetType="Button" x:Key="buttonDanger">
        <Setter Property="Background" Value="#d9534f" />
    </Style>
    <!--Region for button ends here-->



    <!--MenuBar Control Template-->
    <Style TargetType="MenuItem" >
        <EventSetter Event="MenuItem.PreviewMouseLeftButtonDown" Handler="MenuMouseDown" />
        <EventSetter Event="MenuItem.PreviewMouseLeftButtonUp" Handler="MenuMouseUp" />
        <EventSetter Event="MenuItem.MouseEnter" Handler="MenuMouseEnter" />
        <EventSetter Event="MenuItem.MouseLeave" Handler="MenuMouseLeave"/>
        <EventSetter Event="MenuItem.GotKeyboardFocus" Handler="MenuItemHighlighted" />
        <EventSetter Event="LostKeyboardFocus" Handler="FocusLost" />

        <Setter Property="FontFamily" Value="Helvetica Neue" />
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Grid SnapsToDevicePixels="True">
                        <Rectangle x:Name="OuterBorder" RadiusY="1" RadiusX="1"/>
                        <Rectangle x:Name="Bg" Fill="{Binding Path=Background, RelativeSource={RelativeSource AncestorType=Menu}}" MouseLeftButtonDown="ItemMouseDown" MouseLeftButtonUp="ItemMouseUp" MouseEnter="MouseEnterItem" MouseLeave="MouseLeaveItem" Margin="1" RadiusY="0" RadiusX="0" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0"/>
                        <Rectangle x:Name="InnerBorder" Margin="2" />
                        <DockPanel>
                            <ContentPresenter x:Name="Icon" Content="{TemplateBinding Icon}" ContentSource="Icon" Margin="4,0,6,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                            <Path x:Name="GlyphPanel" Data="M0,5.1L1.7,5.2 3.4,7.1 8,0.4 9.2,0 3.3,10.8z" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center"/>
                            <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <TextBlock.FontSize>12</TextBlock.FontSize>
                                <TextBlock.LineHeight>1.42</TextBlock.LineHeight>
                            </ContentPresenter>
                        </DockPanel>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="-1">
                            <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Gray">
                                <Border x:Name="SubMenuBorder" Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType=Menu}}" Opacity="0.8">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Margin="1,0" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="30" VerticalAlignment="Top" Width="0">
                                                <!--Submenu item content rectangle box. changing its opactiy to 0.6-->
                                                <Rectangle x:Name="OpaqueRect" Fill= "{Binding Path=Background, RelativeSource={RelativeSource AncestorType=Menu}}" Opacity="0.9" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                            </Canvas>
                                            <Rectangle Fill="{Binding Path=Background, RelativeSource={RelativeSource AncestorType=Menu}}" Opacity="0.9" HorizontalAlignment="Left" Margin="1,2" RadiusY="2" RadiusX="2" Width="28"/>
                                            <Rectangle Fill="{Binding Path=Background, RelativeSource={RelativeSource AncestorType=Menu}}" Opacity="0.9" HorizontalAlignment="Left" Margin="29,2,0,8" Width="1"/>
                                            <Rectangle Fill="{Binding Path=Background, RelativeSource={RelativeSource AncestorType=Menu}}" Opacity="0.9" HorizontalAlignment="Left" Margin="30,2,0,8" Width="1"/>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Themes:SystemDropShadowChrome>
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,3,3"/>
                            <Setter Property="Color" TargetName="Shdw" Value="#30000000"/>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Stroke" TargetName="Bg" Value="#20717070"/>
                            <Setter Property="Fill" TargetName="Bg">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#20717070" Offset="0"/>
                                        <GradientStop Color="#20717070" Offset="0.75"/>
                                        <GradientStop Color="#50717070" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>


                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter Property="Stroke" TargetName="Bg" Value="Transparent"/>
                            <Setter Property="Fill" TargetName="Bg">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,0">
                                        <GradientStop Color="#28c1bfbf" Offset="0"/>
                                        <GradientStop Color="#28c1bfbf" Offset="0.75"/>
                                        <GradientStop Color="#28c1bfbf" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Stroke" TargetName="InnerBorder" Value="#50d1d1d7"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF9A9A9A"/>
                            <Setter Property="Fill" TargetName="GlyphPanel" Value="#FF848589"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>


            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Menu" >
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="#080707"/>
    </Style>
    <Style TargetType="Popup">
        <Setter Property="Margin" Value="0,15,0,0"/>
        <Setter Property="Width" Value="170"/>

    </Style>


    <Style TargetType="Menu" x:Key="MenuPrimary">
        <!--Menu style for basic menu-->
        <Setter Property="Background" Value="#428bca" />
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style TargetType="Menu" x:Key="MenuInfo">
        <!--Menu style for basic menu-->
        <Setter Property="Background" Value="#5bc0de" />
    </Style>

    <Style TargetType="Menu" x:Key="MenuSuccess" >
        <!--Menu style for basic menu-->
        <Setter Property="Background" Value=" #5cb85c" />
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style TargetType="Menu" x:Key="MenuWarning" >
        <!--Menu style for basic menu-->
        <Setter Property="Background" Value="#f0ad4e" />
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style TargetType="Menu" x:Key="MenuDanger">
        <!--Menu style for basic menu-->
        <Setter Property="Background" Value="#d9534f" />
        <Setter Property="Foreground" Value="White"/>
    </Style>


    <!--Style for MenuBar region Ends here-->


                                                           <!---NEW STYLE FOR SWITCHBUTTON Start here-->
    
    <Style TargetType="local:SwitchButton" x:Key="myRadiobutton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:SwitchButton">
                    <local:CustomPanel x:Name="customPanel"
                                       Orientation="Horizontal"
                                       DisableColor="{Binding Path=DisableColor, RelativeSource={RelativeSource TemplatedParent}}"
                                       InitialDisabledValue="#dbdbe0"
                                       InitialEnabledValue="{TemplateBinding Background}"
                                       PrevCheck="{Binding Path=PrevCheck, RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                                       EnableColor="{Binding Path=EnableColor, RelativeSource={RelativeSource TemplatedParent}}"
                                       Check="{Binding Path=Disabled, RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                                  
                                       Style="{DynamicResource mystyle}"
                                       >
                        <Border x:Name="EnableButton" HorizontalAlignment="Left" Tag="Enable"
                                Background="{Binding Path=EnableColor,RelativeSource={RelativeSource AncestorType=local:CustomPanel},Mode=TwoWay}"
                                CornerRadius="6,0,0,6" Width="49" Height="23" MouseEnter="RadioButtonEnter" MouseLeave="RadioButtonLeave">
                            <ContentPresenter HorizontalAlignment="Center" Tag="Enable" VerticalAlignment="Center" Content="Enable" />
                        </Border>
                        <Border x:Name="DisableButton" Tag="Disable" HorizontalAlignment="Right" MouseEnter="RadioButtonEnter" MouseLeave="RadioButtonLeave"
                                Background="{Binding Path=DisableColor,RelativeSource={RelativeSource AncestorType=local:CustomPanel},Mode=TwoWay}"
                                CornerRadius="0,6,6,0" Width="49" Height="23" >
                            <ContentPresenter HorizontalAlignment="Center" Tag="Disable" VerticalAlignment="Center" Content="Disable" />
                        </Border>
                    </local:CustomPanel>
                    <ControlTemplate.Resources>
                        <Style TargetType="StackPanel" x:Key="mystyle">
                            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="RadioButtonDown" />
                            <EventSetter Event="PreviewMouseLeftButtonUp" Handler="RadioButtonUp" />
                            
                        </Style>
                    </ControlTemplate.Resources>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="TextBlock.Foreground" Value="White"/>
        <Setter Property="TextBlock.FontSize" Value="12"/>
        <Setter Property="TextBlock.FontWeight" Value="SemiBold" />
        <Setter Property="TextBlock.FontFamily" Value="Segoe UI" />
        <Setter Property="EnableColor" Value="{Binding Path=Background,RelativeSource={RelativeSource Self},Mode=OneWay}" />
        <Setter Property="DisableColor" Value="#dbdbe0" />
        <Setter Property="InitialEnabledValue" Value="{Binding Path=Background,RelativeSource={RelativeSource Self},Mode=OneWay}" />
        <Setter Property="InitialDisabledValue" Value="#dbdbe0" />

        <EventSetter Event="Loaded" Handler="RadioButtonOnLoad" />
        

    </Style>

    <Style BasedOn="{StaticResource myRadiobutton}" TargetType="local:SwitchButton" x:Key="SwitchButtonPrimary"> 
        <Setter Property="Background" Value="#428bca" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="120" />
    </Style>

    <Style BasedOn="{StaticResource myRadiobutton}" TargetType="local:SwitchButton" x:Key="SwitchButtonSuccess">
        <Setter Property="Background" Value="#5cb85c" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="120" />
    </Style>

    <Style BasedOn="{StaticResource myRadiobutton}" TargetType="local:SwitchButton" x:Key="SwitchButtonWarning">
        <Setter Property="Background" Value="#f0ad4e" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="120" />
    </Style>


    <Style BasedOn="{StaticResource myRadiobutton}" TargetType="local:SwitchButton" x:Key="SwitchButtonDanger">
        <Setter Property="Background" Value="#d9534f" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="120" />
    </Style>


    <Style BasedOn="{StaticResource myRadiobutton}" TargetType="local:SwitchButton" x:Key="SwitchButtonInfo">
        <Setter Property="Background" Value="#5bc0de" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="120" />
    </Style>

    <Style BasedOn="{StaticResource myRadiobutton}" TargetType="local:SwitchButton" x:Key="SwitchButtonBasic">
        <Setter Property="Background" Value="Black" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="120" />
    </Style>
    
                                                                <!--Style for SWITCHBUTTON Ends here-->
    
                                                                <!--Style for  CHECKBOX WITHOUTBOXES-->

    <Style  TargetType="CheckBox" x:Key="CustomCheckBox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox" >
                    <Border>
                        <Grid>
                            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="{TemplateBinding Padding}"  />
                            <Border>
                                <Border.Background>
                                    <VisualBrush Opacity="1.0" Stretch="None">
                                        <VisualBrush.Visual>
                                            <Path Name="path" Opacity="0.4" Data="M 0 5 L 3 10 10 0" Stroke="{Binding Path=Background,RelativeSource={RelativeSource TemplatedParent}}" StrokeThickness="1.6" 
			StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" />
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Border.Background>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="path" Property="Opacity" Value="1.0" />
                            <Setter TargetName="path" Property="Stroke" Value="{Binding Path=Background,RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="path" Property="StrokeThickness" Value="2.5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"  />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="19" />
        <Setter Property="Height" Value="21" />
    </Style>
    <Style TargetType="CheckBox" x:Key="CheckBoxPrimary" BasedOn="{StaticResource CustomCheckBox}">
        <Setter Property="Background" Value="#428bca" />
        
    </Style>
    <Style TargetType="CheckBox" x:Key="CheckBoxSuccess" BasedOn="{StaticResource CustomCheckBox}">
        <Setter Property="Background" Value="#5cb85c" />
    </Style>
    <Style TargetType="CheckBox" x:Key="CheckBoxInfo" BasedOn="{StaticResource CustomCheckBox}">
        <Setter Property="Background" Value="#5bc0de" />
    </Style>
    <Style TargetType="CheckBox" x:Key="CheckBoxWarning" BasedOn="{StaticResource CustomCheckBox}">
        <Setter Property="Background" Value="#f0ad4e" />
    </Style>
    <Style TargetType="CheckBox" x:Key="CheckBoxDanger" BasedOn="{StaticResource CustomCheckBox}">
        <Setter Property="Background" Value="#d9534f" />
    </Style>
    <Style TargetType="CheckBox" x:Key="CheckBoxBasic" BasedOn="{StaticResource CustomCheckBox}">
        <Setter Property="Background" Value="Black" />
    </Style>
                                            <!--CHECKBOX WITHOUT BOXES ENDS-->
    
                                               <!--CHECKBOX WITHBOXES-->
    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#DDD" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#AAA" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!-- Border Brushes for checkbox  -->

    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#777" Offset="0.0"/>
                <GradientStop Color="#000" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#444" Offset="0.0"/>
                <GradientStop Color="#888" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />




    <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxWithBox">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisualStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"  
                                  Width="17" 
                                  Height="17" 
                                  CornerRadius="2" 
                                  Background="{StaticResource NormalBrush}"
                                  BorderThickness="1"
                                  BorderBrush="{TemplateBinding Background}">
                                <Path 
                                    Width="11" Height="11" 
                                    x:Name="CheckMark"
                                    SnapsToDevicePixels="False" 
                                    Stroke="{TemplateBinding Background}"
                                    StrokeThickness="2"
                                    Data="M 2,4 C 2,4 3,5 5,13 C 5,13 5,3 12,0" />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left"
                                RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>
    <!-- Focus Style -->

    <SolidColorBrush x:Key="InputBackgroundFocused" Color="Orange"></SolidColorBrush>

    <Style x:Key="CheckBoxFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border CornerRadius="2" Margin="0,0,4,3" BorderThickness="2" BorderBrush="{StaticResource InputBackgroundFocused}" Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="CheckBox" BasedOn="{StaticResource CheckBoxWithBox}">
        <Setter Property="Background" Value="Black" />
    </Style>
    
    <Style TargetType="CheckBox" x:Key="CheckPrimary" BasedOn="{StaticResource CheckBoxWithBox}">
        <Setter Property="Background" Value="#428bca" />
    </Style>
    
    <Style TargetType="CheckBox" x:Key="CheckSuccess" BasedOn="{StaticResource CheckBoxWithBox}">
        <Setter Property="Background" Value="#5cb85c" />
    </Style>
    
    <Style TargetType="CheckBox" x:Key="CheckWarning" BasedOn="{StaticResource CheckBoxWithBox}">
        <Setter Property="Background" Value="#f0ad4e" />
    </Style>
    
    <Style TargetType="CheckBox" x:Key="CheckInfo" BasedOn="{StaticResource CheckBoxWithBox}">
        <Setter Property="Background" Value="#5bc0de" />
    </Style>
    
    <Style TargetType="CheckBox" x:Key="CheckDanger" BasedOn="{StaticResource CheckBoxWithBox}">
        <Setter Property="Background" Value="#d9534f" />
    </Style>
    
   
                                                             <!--CHECKBOX WITHBOXES ENDS-->
   

</ResourceDictionary>